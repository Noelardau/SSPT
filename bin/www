
  
// (async ()=>{  
//   try{

//     mongoose.connect("mongodb://127.0.0.1:27017/test")
//     console.log("ok")
//   }catch(e){
//     console.log(e)
//   }
// })()




// const {Rools, Rule} = require("rools")



// const facts = {
//   user:{
//     name:"Noe",
//     estSortie: false,
//     aFaitFete: false,
//     laveMain: false
//   }
// }

// const ruleLaveMain = new Rule({
//   name:"quand il doit se laver les mains",
//   when: [
//     (facts)=> facts.user.aFaitFete == true || facts.user.estSortie == true
//   ],
//   then: (facts) => {
//     facts.user.laveMain = true
//   }
// })



// const rools = new Rools()

// rools.register([ruleLaveMain]).then(data=>{
//   rools.evaluate(facts).then(data=> {
//     console.log(facts)
//     if(facts.user.laveMain){
//       console.log("Vous devez vous lavez les mains !!")
//     }else{
//       console.log("vous n'avez rien Ã  craindre !!!")
//     }
//   })
// })












// #!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('slam:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
